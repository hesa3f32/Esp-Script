-- Define initial customization options
local defaultHighlightColor = Color3.fromRGB(255, 255, 255)
local outlineColor = Color3.fromRGB(0, 0, 0)
local fillTransparency = 0.5
local outlineTransparency = 0
local maxDistance = 500

-- Toggle variable
local highlightsEnabled = true

-- Table to keep track of players and their distances
local playerDistances = {}

-- Function to get the highlight color based on the player's team
local function getHighlightColor(player)
    local team = player.Team
    if team then
        return team.TeamColor.Color
    else
        return defaultHighlightColor
    end
end

-- Function to create highlight and name for a player
local function createHighlight(player)
    local character = player.Character or player.CharacterAdded:Wait()
    if character and not character:FindFirstChild("PlayerHighlight") then
        -- Highlight
        local highlight = Instance.new("Highlight")
        highlight.Name = "PlayerHighlight"
        highlight.Adornee = character
        highlight.FillColor = getHighlightColor(player)
        highlight.OutlineColor = outlineColor
        highlight.FillTransparency = fillTransparency
        highlight.OutlineTransparency = outlineTransparency
        highlight.Parent = character

        -- Name tag
        if not character:FindFirstChild("PlayerName") then
            local head = character:FindFirstChild("Head")
            if head then
                local billboard = Instance.new("BillboardGui")
                billboard.Name = "PlayerName"
                billboard.Adornee = head
                billboard.Size = UDim2.new(0,150,0,30) -- Küçük boyut
                billboard.StudsOffset = Vector3.new(0,2.5,0)
                billboard.AlwaysOnTop = true
                billboard.Parent = character

                local label = Instance.new("TextLabel")
                label.Size = UDim2.new(1,0,1,0)
                label.BackgroundTransparency = 1
                label.RichText = true
                label.Font = Enum.Font.SourceSansSemibold
                label.TextSize = 14 -- Küçük yazı boyutu
                label.TextWrapped = true
                label.Parent = billboard
            end
        end
    end
end

-- Function to remove highlight and name from a player
local function removeHighlight(player)
    local character = player.Character
    if character then
        local highlight = character:FindFirstChild("PlayerHighlight")
        if highlight then
            highlight:Destroy()
        end
        local nameTag = character:FindFirstChild("PlayerName")
        if nameTag then
            nameTag:Destroy()
        end
    end
end

-- Function to update highlights based on distance, health and name
local function updateHighlights()
    local localPlayer = game.Players.LocalPlayer
    local localCharacter = localPlayer.Character
    if localCharacter and localCharacter.PrimaryPart then
        local localPosition = localCharacter.PrimaryPart.Position
        for _, player in pairs(game.Players:GetPlayers()) do
            if player ~= localPlayer then
                local character = player.Character
                if character and character.PrimaryPart then
                    local distance = (localPosition - character.PrimaryPart.Position).Magnitude
                    playerDistances[player] = distance

                    if distance <= maxDistance then
                        createHighlight(player)
                        local nameTag = character:FindFirstChild("PlayerName")
                        if nameTag and nameTag:FindFirstChildOfClass("TextLabel") then
                            local health = character:FindFirstChildWhichIsA("Humanoid") and character:FindFirstChildWhichIsA("Humanoid").Health or 0
                            local label = nameTag:FindFirstChildOfClass("TextLabel")
                            label.Text = string.format(
                                '<font color="#FF0000">%s</font> <font color="#FF69B4">[%d]</font> <font color="#0000FF">(%d m)</font>',
                                player.Name,
                                math.floor(health),
                                math.floor(distance)
                            )
                        end
                    else
                        removeHighlight(player)
                    end
                end
            end
        end
    end
end

-- Batch processing function
local function batchUpdateHighlights()
    for _, player in pairs(game.Players:GetPlayers()) do
        if highlightsEnabled and playerDistances[player] and playerDistances[player] <= maxDistance then
            createHighlight(player)
        else
            removeHighlight(player)
        end
    end
end

-- Connect events
game.Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        if highlightsEnabled then
            createHighlight(player)
        end
    end)
    player.CharacterRemoving:Connect(function()
        removeHighlight(player)
    end)
end)

game.Players.PlayerRemoving:Connect(function(player)
    removeHighlight(player)
    playerDistances[player] = nil
end)

-- Update highlights periodically
spawn(function()
    while true do
        if highlightsEnabled then
            updateHighlights()
        end
        wait(0.5)
    end
end)

-- Batch processing periodically
spawn(function()
    while true do
        batchUpdateHighlights()
        wait(0.1)
    end
end)

-- Toggle button logic
local function createToggleButton()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "ToggleHighlightGui"
    screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(0, 200, 0, 50)
    toggleButton.Position = UDim2.new(0, 10, 0, 10)
    toggleButton.Text = "Disable Highlights"
    toggleButton.Parent = screenGui

    toggleButton.MouseButton1Click:Connect(function()
        highlightsEnabled = not highlightsEnabled
        if highlightsEnabled then
            toggleButton.Text = "Disable Highlights"
            updateHighlights()
        else
            toggleButton.Text = "Enable Highlights"
            for _, player in pairs(game.Players:GetPlayers()) do
                removeHighlight(player)
            end
        end
    end)
end

-- Create toggle button
createToggleButton()

-- Add keyboard toggle for (-) key
local UserInputService = game:GetService("UserInputService")
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.Minus then
        highlightsEnabled = not highlightsEnabled
        if highlightsEnabled then
            for _, player in pairs(game.Players:GetPlayers()) do
                createHighlight(player)
            end
        else
            for _, player in pairs(game.Players:GetPlayers()) do
                removeHighlight(player)
            end
        end
    end
end)
